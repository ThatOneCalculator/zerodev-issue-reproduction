import type { GetKernelVersion, KERNEL_VERSION_TYPE, ValidatorInitData } from "@zerodev/sdk/types";
import type { EntryPoint } from "permissionless/types";
import type { Chain, Client, Hex, Transport } from "viem";
import type { Policy } from "./types.js";
import type { ModularSigner } from "./types.js";
export declare const deserializePermissionAccount: <entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined>(client: Client<TTransport, TChain, undefined>, entryPointAddress: entryPoint, kernelVersion: GetKernelVersion<entryPoint>, modularPermissionAccountParams: string, modularSigner?: ModularSigner) => Promise<import("@zerodev/sdk").KernelSmartAccount<entryPoint, TTransport, TChain>>;
export declare const createPolicyFromParams: (policy: Policy) => Promise<Policy>;
export declare const decodeParamsFromInitCode: (initCode: Hex, kernelVersion: KERNEL_VERSION_TYPE) => {
    index: bigint;
    validatorInitData: ValidatorInitData;
};
//# sourceMappingURL=deserializePermissionAccount.d.ts.map